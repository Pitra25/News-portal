// Code generated by zenrpc v2.2.12; DO NOT EDIT.

package rpc

import (
	"context"
	"encoding/json"

	"github.com/vmkteam/zenrpc/v2"
	"github.com/vmkteam/zenrpc/v2/smd"
)

var RPC = struct {
	NewsService       struct{ GetAllNews, GetNewsById, GetNewsCount string }
	ShortNewsService  struct{ GetAllShortNews string }
	TagsService       struct{ GetAllTags string }
	CategoriesService struct{ GetAllCategories string }
}{
	NewsService: struct{ GetAllNews, GetNewsById, GetNewsCount string }{
		GetAllNews:   "getallnews",
		GetNewsById:  "getnewsbyid",
		GetNewsCount: "getnewscount",
	},
	ShortNewsService: struct{ GetAllShortNews string }{
		GetAllShortNews: "getallshortnews",
	},
	TagsService: struct{ GetAllTags string }{
		GetAllTags: "getalltags",
	},
	CategoriesService: struct{ GetAllCategories string }{
		GetAllCategories: "getallcategories",
	},
}

func (NewsService) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Methods: map[string]smd.Service{
			"GetAllNews": {
				Parameters: []smd.JSONSchema{
					{
						Name:     "params",
						Type:     smd.Object,
						TypeName: "QueryParams",
						Properties: smd.PropertyList{
							{
								Name: "NewsId",
								Type: smd.Integer,
							},
							{
								Name: "CategoryId",
								Type: smd.Integer,
							},
							{
								Name: "TagId",
								Type: smd.Integer,
							},
							{
								Name: "PageSize",
								Type: smd.Integer,
							},
							{
								Name: "Page",
								Type: smd.Integer,
							},
						},
					},
				},
				Returns: smd.JSONSchema{
					Type:     smd.Array,
					TypeName: "[]News",
					Items: map[string]string{
						"$ref": "#/definitions/News",
					},
					Definitions: map[string]smd.Definition{
						"News": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "newsID",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
								{
									Name:     "content",
									Optional: true,
									Type:     smd.String,
								},
								{
									Name: "author",
									Type: smd.String,
								},
								{
									Name:     "category",
									Optional: true,
									Ref:      "#/definitions/Category",
									Type:     smd.Object,
								},
								{
									Name: "tagIds",
									Type: smd.Array,
									Items: map[string]string{
										"$ref": "#/definitions/Tag",
									},
								},
								{
									Name: "publishedAt",
									Type: smd.String,
								},
							},
						},
						"Category": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "categoryId",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
						"Tag": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "tagID",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
					},
				},
			},
			"GetNewsById": {
				Parameters: []smd.JSONSchema{
					{
						Name: "id",
						Type: smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Optional: true,
					Type:     smd.Object,
					TypeName: "News",
					Properties: smd.PropertyList{
						{
							Name: "newsID",
							Type: smd.Integer,
						},
						{
							Name: "title",
							Type: smd.String,
						},
						{
							Name:     "content",
							Optional: true,
							Type:     smd.String,
						},
						{
							Name: "author",
							Type: smd.String,
						},
						{
							Name:     "category",
							Optional: true,
							Ref:      "#/definitions/Category",
							Type:     smd.Object,
						},
						{
							Name: "tagIds",
							Type: smd.Array,
							Items: map[string]string{
								"$ref": "#/definitions/Tag",
							},
						},
						{
							Name: "publishedAt",
							Type: smd.String,
						},
					},
					Definitions: map[string]smd.Definition{
						"Category": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "categoryId",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
						"Tag": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "tagID",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
					},
				},
			},
			"GetNewsCount": {
				Parameters: []smd.JSONSchema{
					{
						Name:     "params",
						Type:     smd.Object,
						TypeName: "QueryParams",
						Properties: smd.PropertyList{
							{
								Name: "NewsId",
								Type: smd.Integer,
							},
							{
								Name: "CategoryId",
								Type: smd.Integer,
							},
							{
								Name: "TagId",
								Type: smd.Integer,
							},
							{
								Name: "PageSize",
								Type: smd.Integer,
							},
							{
								Name: "Page",
								Type: smd.Integer,
							},
						},
					},
				},
				Returns: smd.JSONSchema{
					Type: smd.Integer,
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s NewsService) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}
	var err error

	switch method {
	case RPC.NewsService.GetAllNews:
		var args = struct {
			Params queryParams `json:"params"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"params"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.GetAllNews(ctx, args.Params))

	case RPC.NewsService.GetNewsById:
		var args = struct {
			Id int `json:"id"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"id"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.GetNewsById(ctx, args.Id))

	case RPC.NewsService.GetNewsCount:
		var args = struct {
			Params queryParams `json:"params"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"params"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.GetNewsCount(ctx, args.Params))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}

func (ShortNewsService) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Methods: map[string]smd.Service{
			"GetAllShortNews": {
				Parameters: []smd.JSONSchema{
					{
						Name:     "params",
						Type:     smd.Object,
						TypeName: "QueryParams",
						Properties: smd.PropertyList{
							{
								Name: "NewsId",
								Type: smd.Integer,
							},
							{
								Name: "CategoryId",
								Type: smd.Integer,
							},
							{
								Name: "TagId",
								Type: smd.Integer,
							},
							{
								Name: "PageSize",
								Type: smd.Integer,
							},
							{
								Name: "Page",
								Type: smd.Integer,
							},
						},
					},
				},
				Returns: smd.JSONSchema{
					Type:     smd.Array,
					TypeName: "[]NewsSummary",
					Items: map[string]string{
						"$ref": "#/definitions/NewsSummary",
					},
					Definitions: map[string]smd.Definition{
						"NewsSummary": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "newsSummaryID",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
								{
									Name: "publishedAt",
									Type: smd.String,
								},
								{
									Name:     "category",
									Optional: true,
									Ref:      "#/definitions/Category",
									Type:     smd.Object,
								},
								{
									Name: "tagIds",
									Type: smd.Array,
									Items: map[string]string{
										"$ref": "#/definitions/Tag",
									},
								},
							},
						},
						"Category": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "categoryId",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
						"Tag": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "tagID",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
					},
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s ShortNewsService) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}
	var err error

	switch method {
	case RPC.ShortNewsService.GetAllShortNews:
		var args = struct {
			Params queryParams `json:"params"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"params"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.GetAllShortNews(ctx, args.Params))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}

func (TagsService) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Methods: map[string]smd.Service{
			"GetAllTags": {
				Parameters: []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Type:     smd.Array,
					TypeName: "[]Tag",
					Items: map[string]string{
						"$ref": "#/definitions/Tag",
					},
					Definitions: map[string]smd.Definition{
						"Tag": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "tagID",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
					},
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s TagsService) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}

	switch method {
	case RPC.TagsService.GetAllTags:
		resp.Set(s.GetAllTags(ctx))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}

func (CategoriesService) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Methods: map[string]smd.Service{
			"GetAllCategories": {
				Parameters: []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Type:     smd.Array,
					TypeName: "[]Category",
					Items: map[string]string{
						"$ref": "#/definitions/Category",
					},
					Definitions: map[string]smd.Definition{
						"Category": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "categoryId",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
					},
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s CategoriesService) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}

	switch method {
	case RPC.CategoriesService.GetAllCategories:
		resp.Set(s.GetAllCategories(ctx))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}
